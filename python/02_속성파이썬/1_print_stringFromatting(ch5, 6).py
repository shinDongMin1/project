"""

A byte of python, 5장(기초), 6장(연산자와 수식) 해당 주제의 속성 예제

print() 함수를 통한 데이터 출력 방법
    1) .format()을 이용하여 출력하기- string 자료형(사실상 object)의 메소드를 사용하기
    2) %-formatting를 이용하여 출력하기- Python 2의 방식
    3) f-string을 이용하여 출력하기 -  Literal String Interpolation.
        Python 3.6 이후 버전 가능. 고속 처리. 간편 사용. tuple, list 형의 데이터에 대해서도 적용 가능하다.
"""

"""
# -------------------------------------------------------------------------------------
# 실습 0 : print()의 기본적인 용법
# -------------------------------------------------------------------------------------
"""
"""
print('Hello World')            # ''를 이용한 문자열 출력
print("Nice to meet you.\nI'm JH", end='')      # ""를 이용한 문자열. ""안에 '사용 가능.
print(' from Korea.')                           # 줄 바꾸지 않는 문자열 출력
a = 10; print('a=', a)                            # print()  함수의 인자 값 출력
exit(0)

# 출력결과 -----
# Hello World
# Nice to meet you.
# I'm JH from Korea.
# a= 10

"""


"""
# -------------------------------------------------------------------------------------
# 실습 1 : esc문자(\)와 커저 제어(줄바꾸기, 탭) 관련... 스트링 더하기(+)와 곱하기(*)
# -------------------------------------------------------------------------------------
"""
"""
print("Hello, world!")     # 큰 따옴표로 표현된 문자열
print('한글 출력도 가능함\n')          # 작은 따옴표로 표현해 본 한글 문자열. \n은 줄바꿈을 의미.
print("1. This is Kim's pencil.")  # 두 종류 인용부호를 섞어 사용하는 경우임.
print('2. This is Kim"s pencil.')  # 부적절하지만 섞어 쓸 수 있음을 보였다.
print('3. This is Kim\'s pencil.')  # \(back slash, escape character)다음에 오는 것을 문자로 간주된다.
# 다음 3개의 줄은 한 문장입니다. \를 이용하여 각 줄을 연결합니다. 이를 Explicit line joining라고 한다.
# 명시적인 줄 연결에는 주석문을 붙일 수 없습니다.
print('4. Explicit \
line\
 joining')      # \없이도 줄들을 연결하는 경우(implicit line joining)도 있는데 이 사례는 실습 3에 보였다.
print('5. abc', end='')    # 줄바꾸기 하고 싶지 않을 때..
print('efg', end='***')
#exit(0)
print(r"\nNewlines are indicated by \n", end='')  #r은 순문자열(raw string)을 의미. escape sequence를 해석하지 않는다.
#exit(0)
print("\r6. Carriage Return and Tab\t....")  #\r은 커저를 다시 맨 앞으로 위치하게 한다. 이 줄을 주석문 처리해 보고 비교하기 바랍니다..
# \t는 tab 문자입니다. 적절한 개수가 스페이스 4개로 대치될 수도 있습니다.


# 한 물리적 명령 행에 두 개의 논리적 명령행을 넣었다.
age = 20; name = 'Tom'  # 파이썬에서 권장하는 표현은 아니지만 다수 문장을 한 줄로 쓸 수 있다.

# type(): 변수형을 알려주는 함수, 출력결과=> <class 'int'> <class 'str'>
print('7.', type(age), type(name))      # <class 'int'> <class 'str'>

# 콤마(,)로 문자열을 나열할 경우 공백(기본값)이 자동으로 추가 된다.
print('8.', name, 'is', age, 'years old.')      # ===>8. Tom is 20 years old.

# string concatenation: +로 스트링 문자열을 연결한다. +로 묶으면 공백문자(space)가 추가되지 않는다.
# str() : 스트링으로 변환하는 type casting 함수.
print('9.' + name + 'is' + str(age) + 'years old.')     # ===>9.Tomis20years old.

print('10.', 3 * "hello" )      # 문자열이 3배로 증가한다. ===>10. hellohellohello
print('11.',  "goodbye " *3 )   # 문자열이 3배로 증가한다. ===>11. goodbye goodbye goodbye 

exit(0)
"""




"""
# -------------------------------------------------------------------------------------
# 실습 2 : .format 메소드를 이용하여 프린트할 인자의 출력형태를 지정한다.
# string의 .format method 용법: 스트링 객체는 .format method를 지원한다.
# {}안의 번호를 지정하지 않으면 순차적으로 사용된다.
# {}안의 번호가 format method의 파라미터의 인덱스 번호를 나타낸다.
# 문자열 중의 {} 기호 안에 .format()의 파라미터로 지정한 값을 스트링으로 바꾸어 넣는다.
# -------------------------------------------------------------------------------------
"""
"""
# 한 물리적 명령 행에 두 개의 논리적 명령행을 넣었다.
age = 20; name = 'Tom'  # 파이썬에서 권장하는 표현은 아니지만 다수 문장을 한 줄로 쓸 수 있다.

# format method를 이용한 print 용법: format()안에 출력할 값을 지정한다.
print('1. {0} is {1} years old.'.format(name, age))     # {} 안의 번호는 format() 안의 나열 순서이다.
# ===>1. Tom is 20 years old.

# {} 안의 번호를 지정하지 않으면 순차적으로 사용된다.
# : 뒤에 출력할 형식을 지정할 수 있다. 원래는 : 앞에 format() 파리미터의 인수의 인덱스 번호가 온다.
# 즉, {:5d}은 현재 인덱스 번호가 1이 default이므로 {1:5d}과 같은 상황이다.
# 5d는 5자릿수의 decimal 정수 출력 형식을 지정하고 있다.
print('2. {} is {:5d} years old.'.format(name, 50))
# ===>2. Tom is    50 years old.    # 50이 총 5개 자리로 표현되었음에 유의..

# {}안의 번호가 format method의 파라미터의 순서를 나타낸다.
print('3. {1} is {0} years old.'.format(age, 'She'))    # format() 안에 값을 써도 된다.
# ===>3. She is 20 years old.

# 사용자 지정 키워드를 이용해 변수를 표기
print('4. {someone} likes {fruit}.'.format(someone=name, fruit='apple'))
# ===>4. Tom likes apple.

# 문자열의 타입을 출력해 본다.
a = "Hello, world!"           # string 변수 a 선언. 변수 a는 스트링 속성을 갖는 class로 선언된 object이다.
print('5.', type(a), a)
# ===>5. <class 'str'> Hello, world!

# {} 인덱스 번호와 함께 데이터의 출력 형식을 지정할 수 있다.
# 0:4.1f : 0번째 인자에 대해 - 총 4개 자리. 소수 첫째 자리까지 출력. 둘째 자리의 값이 반 올림된다.
# 1:5.2f : 1번째 인자에 대해 - 총 5개 자리. 소수 두번째 자리까지 출력. 셋째 자리의 값이 반 올림된다.
a = '6. {0:4.1f}***{1:5.2f}'.format(3.1499, 2.495989)
print(a)                                    # 출력 결과:  _3.1*** 2.50
# ===>6.  3.1*** 2.50

# 출력할 내용을 문자열로 정의할 수 있다. 이때도 format() 메소드를 사용할 수 있다.
# 스트링, 문자열에 {}이 들어가면 format 메소드에서 지정한 파라미터를 스트링으로 바꾸어 문자열에 넣는다.
a ='{:.3f}***{:5.2f}'.format(1.3, 5.9299)
# {:.3f}: 소수이하 3째 자리까지 표현.
# {:5.2f}: 소수이하 2째 자리. 이경우는 반올림됨. .을 포함하여 총 5자리. 남으면 빈칸 여백으로 표시
print('7.', a)      # 6. 7.300*** 5.93
# ===>

# {}안에 format 메소드의 파라미터 인덱스번호를 넣을 수 있다.
a ='8. {1}***{0}'.format('Hello', 'World')     # 출력 결과: World***Hello
print(a)
# ===>8. World***Hello

# {} 안에 번호를 쓰지 않고 사용자 지정 키워드를 사용하여 출력 값을 지정.
print('9. {who} is {name}.'.format(name='Kim',
who='He'))       # 출력:
# ===>9. He is Kim.

a = 0x396
print('10. |{0:x}|{0:04x}|{0:4x}|{0:06x}|'.format(a))          # 앞에 0을 채워 출력하기
# ===>10. |396|0396| 396|000396|

# 부동소수의 출력형식을 자릿수를 지정하여 출력. 지정한 자릿수가 모자라면 필요한 만큼 확보하여 출력한다.
num1 = 10; num2 = 90.123456780      # 소수 이하 맨마지막 0은 무시된다.
print('11. |{0:2d}|{0:3d}|{1:f}|{1:5.2f}|{1:6.2f}|{1:10.4e}|{1:7.7e}|'.format(num1, num2))
# |10| 10|90.123457|90.12| 90.12|9.0123e+01|9.0123457e+01|
# 2d: 2자리의 정수 형태 출력. |10|
# 3d: 3자리의 정수 형태 출력 | 10|
# f: 자릿수를 지정하지많으면 소수 이하 6자리까지 출력한다. |90.123457| <- 마지막 자리는 6을 반올림하여 출력한 것임.
# 5.2f: 소수점 이하 2자리의 부동소수를 총 5자리(소수점. 포함)로 출력. 여백 없음. |90.12|
# 6.2f: 소수점 이하 2자리의 부동소수를 총 6자리(소수점. 포함)로 출력. 좌측에 남는 1자리의 여백이 만들어진다. | 90.12|
# 10.4e: 소수점 이하 2자리의 부동소수를 총 10자리(부호와 지수 2자리 포함)의 지수형태로 출력. |9.0123e+01|
# 7.7e: 소수점 이하 7자리의 부동소수를 총 7자리(부호와 지수 2자리 포함)의 지수형태로 출력. 자리가 모자라므로 최소의 자릿수로 표현. |9.0123457e+01|

# 16진수를 출력할 자릿수를 지정하여 출력. 지정한 자릿수가 모자라면 필요한 만큼 확보하여 출력한다.
num1 = 0x10; num2 = 0x12345
print('12. |{0:2x}|{0:4x}|{1:2x}|{1:6x}|'.format(num1, num2))
# |10|  10|12345| 12345|
# 2x: 2자리로 표현. 자릿수가 딱 맞음. |10|
# 4x: 2자리로 표현. 남는 2개의 여백이 좌측에 출력. |  10|
# 2x: 2자리로 표현. 자릿수가 모자라 가장 최소의 자릿수 5개로 표현. |12345|
# 6x: 6자리로 표현. 남는 1개의 여백이 좌측에 출력. | 12345|

exit(0)
"""



"""
# -------------------------------------------------------------------------------------
# 실습 3: C 언어의 printf(%) 방식으로 string을 formatting한다.
# %(연산자?)로 출력할 값을 지정. printf() 형식을 지원하기 위한 배려?
# 아래 formatting을 지정하는 Operator의 지정 양식이 실제로 지정하는 파라미터와 일치하지 않으면 오류가 발생한다.
# %c : char 형에 대한 문자 출력
# %d : 십진수로 출력. %3d => 3자리의 십진수로 출력
# %X, %x: 16진수로 출력. %4X => 4자리의 대문자 16진수로 출력.
# -------------------------------------------------------------------------------------
"""
"""
a = 'Kim?'
print(1, 'Hi, %s' % a)       # 변수 a를 string 형(%s)으로 간주하고 출력. 출력결과 => Hi, Kim?
b = 'Hi, %s' % 'Susan?'   # %c로 지정하면 오류 발생.
print(2, b)                # Hi, Susan?

a = 25.14567891115678E-5
print(3, type(a), a)          # <class 'float'>
print(4, '%e' % a)          # 2.514568e-04,      소수 6째 자리까지 출력.
print(5, '%8.4f' % a)      # 소수점 포함해서 총 8자리. __0.0003

print(6, '***%c***%4d***%X***%4x***' % (0x41, 0xff, 10, 10))    # ***A*** 255***A***   a***
b = '***%c***%4X***%d***%f***' % (0x30, 0xff, 10, 10)
print(7, b)                                                    # ***0***  FF***10***10.000000***


str1 = 'study'; num1 = 10; num2 = 90.123456780
print(7, '|string=%s|num1=%3d|num2=%3.1f|num2=%s|' % (str1, num1, num2, num2))
# |string=study|num1= 10|num2=90.1|num2=90.12345678|
# str1을 %s로 출력 => |string=study|
# num1을 %3d로 출력 => |num1= 10|
# num2를 %3.1f로 출력 => |num2=90.1|
# num2f를 %s로 출력 => |num2=90.12345678|

exit(0)
"""

"""
# -------------------------------------------------------------------------------------
# 실습 4: f-string 사용. Literal String Interpolation.
# f"" 형식으로 따옴표 내부를 지정한 형식의 스트링 자료로 만든다.
# f-Strings: A New and Improved Way to Format Strings in Python
#           3.6이후에서 활용가능...
#   https://bluese05.tistory.com/70
#   https://www.python.org/dev/peps/pep-0498/
# 장점:
# F-strings provide a concise, readable way to include the value of Python expressions inside strings.
# int, float, str외에도 list, tuple 형 데이터에 대해서도 적용 가능하다.
# -------------------------------------------------------------------------------------
"""
"""
a = 'Kim?'
print(1, f'Hi, {a}')       # 변수 a를 string 형(%s)으로 간주하고 출력.
# 출력 결과 =>1 Hi, Kim?

a = 13
print(2, f'I have {a} apples.')
# 출력 결과 =>2 I have 13 apples.

b = f'I have {a:#5.2f} apples.'     # I have 13.00 apples.
print(3, b)
# 출력 결과 =>3 I have 13.00 apples.

value = 12
print(4, f'input={value:#04x}')        # input=0X0C
# 출력 결과 =>4 input=0X0C

print(5, f'value={2.2838:#7.2f}')      # value=___2.28
# 출력 결과 =>5 value=   2.28

str1 = 'study'; num1 = 10; num2 = 90.123456780
print(f'6 |str1={str1}|num1={num1}|num1_in_3d={num1:#3d}|num2={num2:#f}|num2_in_5.3e={num2:#5.3e}')
# 출력 결과 =>6 |str1=study|num1=10|num1_in_3d= 10|num2=90.123457|num2_in_5.3e=9.012e+01

# 3가지 프린트 형식 지정 방식 비교....
x = 10; y = 3
print(7, f'x + y = {x+y} | x * y = {x*y}')             # f-string 방식. 간결하고 읽기 편하다.
# 출력 결과 =>7 x + y = 13 | x * y = 30

print(8, 'x + y = %d | x * y = %d' % (x+y, x*y))        # %-formatting 방식
# 출력 결과 =>8 x + y = 13 | x * y = 30

print(9, 'x + y = {} | x * y = {}'.format(x+y, x*y))   # str.format 방식
# 출력 결과 =>9 x + y = 13 | x * y = 30

# 아쉽지만 아래와 같이 여러 요소에 공통적인 양식을 지정할 수는 없음.
#a = [2.2838, 123.234, 3.56]; print(10, f'{a:#7.2f}')   # 오류 발생도 안하면서, 아무런 결과도 출력하지 않음

c_age = 17; n_age = 18
msg = (f"I am {c_age} " f"going on {n_age}.")
msg2 = ["hello""world"]
msg3 = ("hello""world")     # string으로 묶는다.
msg4 = "hello""world"
print(10, type(msg), type(msg2), type(msg3), type(msg4))
print(11, msg, msg2, msg3, msg4)




exit(0)

"""

"""
# ========================================================================================================================
# 조금 더 복잡한 사례: 입문자에게는 비추천!!!!
# ========================================================================================================================
"""
"""
# -----------------------------------------------------------------------------------------------------------------
# 암시적인 줄 연결이 가능한 경우
# 다음과 같이 (), [], {}로 묶여진 자료 데이터는 Implicit line joining이 가능합니다.
# -----------------------------------------------------------------------------------------------------------------
month_names = ['Januari', 'Februari', 'Maart',      # These are the
               'April',   'Mei',      'Juni',       # Dutch names
               'Juli',    'Augustus', 'September',  # for the months
               'Oktober', 'November', 'December']   # of the year

print(month_names)
"""


"""
# -----------------------------------------------------------------------------------------------------------------
# .format()과 %를 섞어서 사용한 경우..
# Literal %: %문자를 표현할 때는 %%을 사용한다.
# "^^수자"를 이용하여 빈칸 채우기 
# -----------------------------------------------------------------------------------------------------------------
print('text1={1}|text0={0}|1st %%=%f|3th format parameter={3}|2nd %%=%s|3rd %%=%s'           # 이때는 주석문 가능
      .format('TEXT0', 'TEXT1', num2, num1) % (num2, str1, num2))

# 밑줄(_)로 11칸을 채우고 가운데 정렬(^)하기 (___hello___)
print('{0:_^11}'.format('hello'))
print('{0:*^11}'.format('hello'))
exit(0)
"""


"""
# -----------------------------------------------------------------------------------------------------------------
# numpy를 학습후에는 numpy array의 데이터를 출력을 제어하는 방안에 대해 검토해 보자.
# -----------------------------------------------------------------------------------------------------------------
import numpy as np
y=np.array([1.5e-10, 1.5, 1500])
print(y)          # [  1.500e-10   1.500e+00   1.500e+03]
np.set_printoptions(suppress=True)
print(y)          # [    0.      1.5  1500. ]

y = np.array([1.5383948475e-10, 14568.34574090, 1500.990002, 19.29288e-6])
print('\n', y)

np.set_printoptions(precision=2)
print(y)

def ndprint(a, format_string='{0:.2f}'):
    print([format_string.format(v, i) for i, v in enumerate(a)])
ndprint(y, '{:10.4e}')
exit(0)
"""

