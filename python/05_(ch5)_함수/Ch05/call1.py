"""
# -----------------------------------------------------------------------------------------------------------
# 실습 0 - 지역 변수의 사례: 전역변수가 전역 변수의 지위를 잃어 버리고 지역변수로 바뀌었다.
# 함수내에서 값을 assign 함으로써(x=5) 전역변수의 지위를 잃었다.
# -----------------------------------------------------------------------------------------------------------
def f(x):
    y = x
    x = 5       # 값을 바꾸어서 더이상 전역 변수가 아니다. 새로운 지역 변수 x가 선언되었다.
    return y * y


x = 3           # 원천적으로 메인 루틴에서 선언한 변수는 전역변수이다. 함수 내에서도 그 값을 읽어 사용할 수 있다.
print(f(x))     # 9
print(x)        # 3
exit(0)
"""


"""
# -----------------------------------------------------------------------------------------------------------
# 실습 0 - 지역 변수의 사례: 전역변수가 전역 변수의 지위를 잃어 버리고 지역변수로 바뀌었다.
# 함수내에서 값을 assign 함으로써(x=5) 전역변수의 지위를 잃었다.
# -----------------------------------------------------------------------------------------------------------
def f(x):
    y = x
    x = [5, 8]       # 값을 바꾸어서 더이상 전역 변수가 아니다. 새로운 지역 변수 x가 선언되었다.
    return y + y


x = [1, 2]           # 원천적으로 메인 루틴에서 선언한 변수는 전역변수이다. 함수 내에서도 그 값을 읽어 사용할 수 있다.
print(f(x))
print(x)
exit(0)
"""







"""
# -----------------------------------------------------------------------------------------------------------
# 실습 1 - 전역 변수의 사례
# 원천적으로 메인 루틴에서 선언한 변수 x는 전역변수이다. 함수 내에서 그 값을 읽어 사용할 수 있다.
# 본 사례의 경우 함수 내에서 변수 x에 값을 assign 하는 동작은 함수 선언 단에서 부터 허락되지 않는다. 
# => 메인 루틴에서만 값을 assign하면서 새로운 변수를 선언할 수 있다.
# -----------------------------------------------------------------------------------------------------------


def f():
    y = x       # 전역변수라서 참조(읽기 동작) 가능하다.
#    x = 5       # 함수내에서 값을 assign 하는 동작은 함수 선언 단에서 부터 허락되지 않는다.
    return y * y


x = 3           # 원천적으로 메인 루틴에서 선언한 변수는 전역변수이다. 함수 내에서도 그 값을 읽어 사용할 수 있다.
print(f())      # 9
print(x)        # 3
exit(0)
"""

# -----------------------------------------------------------------------------------------------------------
# 실습 2 - 함수 내에서 전역변수에 write가 가능한 경우가 있다.
# mutable type(비정적) & data sequence(열거형) 자료형은 함수 내에서 수정을 해도 계속 전역변수 지위를 유지한다.
#   mutable type - 데이터를 바꿀 수 있는 자료형. list
#   data sequence - 연속적인 데이터 나열형 자료. list, tuple, string 등.
#   list 자료는 대표적인 mutable data sequence 자료형이다.
# 리스트 자료는 함수내에서 값을 assign 하는 동작도 허용된다.
# -----------------------------------------------------------------------------------------------------------


def f():
    y = x.copy()    # y는 다른 메모리에 공간에 데이터를 복사하여 새로운 메모리 공간을 확보한 변수이다.
    z = x           # z는 x와 같은 데이터 공간을 공유한 변수이다.
    x[0] = 5        # 값을 바꾸었지만 mutable sequence 자료형은 계속 전역변수 지위를 유지한다.
    z[1] = 'q'      # x와 데이터 영역을 공유하기 때문에 x도 같이 바뀐다.
    return x, y, z  # 3개의 파라미터를 tuple로 묶어서 반환한다.


x = [1, 2, 3]   # 원천적으로 메인 루틴에서 선언한 변수는 전역변수이다. 함수 내에서도 그 값을 읽어 사용할 수 있다.
print(x)        # [1, 2, 3]
print(f())      # ([5, 'q', 3], [1, 2, 3], [5, 'q', 3])


