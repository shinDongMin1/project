
cities = ['서울', '부산', '인천', '대구', '대전', '광주', '울산', '수원']
print(cities)

"""
#----------------------------------------------------------------------------------------------------
# 실습 1: slicing operation 연습: 범위지정 방법=>[시작:끝+1]
#----------------------------------------------------------------------------------------------------

# slicing 동작은 원소의 범위를 지정할 때 사용된다.
# ':'를 사용하여 '시작:끝+1'로 범위를 지정한다.
print('1)', cities[0:6])    # 0~5번까지를 지정하는 slicing operation
# 1) ['서울', '부산', '인천', '대구', '대전', '광주']

print('2)', cities[0:5])    # 0~4번까지를 지정하는 slicing operation
# 2) ['서울', '부산', '인천', '대구', '대전']


# 주의 : -1은 인덱싱에서는 맨 끝의 원소를 지정하지만, 슬라이싱에서 맨 끝을 지정하는 용도로 사용할 때는 '맨_끝-1'까지 만을 지정한다.
print('3)', cities[0:-1])   # 0에서 '끝-1'까지를 지정하는 slicing operation
# 3) ['서울', '부산', '인천', '대구', '대전', '광주', '울산']         '수원'이 빠져있음에 유의.


# reverse indexing(?) => 제목으로 적합한지 의문. 왜냐하면 앞에서부터 차례로 지정하기 때문.
# ['서울', '부산', '인천', '대구', '대전', '광주', '울산', '수원']
#    -8     -7     -6     -5     -4      -3     -2     -1
print('4)', cities[-8:-1])
# 4) ['서울', '부산', '인천', '대구', '대전', '광주', '울산']         '수원'이 빠져있음에 유의.

print('5)', cities[-8:])        # 끝 지점을 지정하지 않으면 맨 끝까지 범위에 포함된다.
# 5) ['서울', '부산', '인천', '대구', '대전', '광주', '울산', '수원']

print('6)', cities[:])        # 끝 지점을 지정하지 않으면 맨 끝까지 범위에 포함된다.
# 6) ['서울', '부산', '인천', '대구', '대전', '광주', '울산', '수원']

exit(0)
"""

#"""
#----------------------------------------------------------------------------------------------------
# 실습 2: slicing operation 연습 : 범위지정 방법=>[시작:끝+1:증분]
#----------------------------------------------------------------------------------------------------
# slicing의 다른 기법 => [시작:끝+1:증분]
# 증분을 지정하지 않으면 +1로 간주된다.
# 증분이 음수이면 거꾸로 범위를 지정한다.

# 3가지 인자를 모두 지정하지 않았다. 시작=0, 끝, 증분=1
print('1)', cities[::])


# 아래에서 [0::2]는 [::2]와 같은 표현이다.
print('2)', cities[0::2])   # 0~끝의 범위를 하나씩 건너뛰어 액세스한다.
# 2) ['서울', '인천', '대전', '울산']

# ':' 좌 혹은 우측에 값이 없으면 맨 앞, 혹은 맨 끝을 의미한다.
print('3)', cities[-1::-1])     # 맨 끝부터 시작해서 하나씩 증분을 감소시켜 가면서 맨 처음의 범위를 지정한다.
# 3) ['수원', '울산', '광주', '대전', '대구', '인천', '부산', '서울']

# ':' 좌 혹은 우측에 값이 없으면 맨 앞, 혹은 맨 끝을 의미한다.
print('4)', cities[::-1])     # 2)의 표현와 같은 동작을 수행한다.
# 4) ['수원', '울산', '광주', '대전', '대구', '인천', '부산', '서울']
#"""

#----------------------------------------------------------------------------------------------------
# 미션 1: slicing operation 연습 : 범위지정 방법=>[시작:끝+1:증분]
# cities 리스트를 사용하여 ['울산', '대전', '인천', '서울'] 이 출력되는 루틴을 작성하시오.
#----------------------------------------------------------------------------------------------------

print(cities[-2::-2])

#----------------------------------------------------------------------------------------------------
# 미션 2: slicing operation 연습 : 범위지정 방법=>[시작:끝+1:증분]
# cities 리스트를 사용하여 '대전', '광주', '울산'이 출력되는 루틴을 작성하시오.
#----------------------------------------------------------------------------------------------------

print(cities[4:7:])

